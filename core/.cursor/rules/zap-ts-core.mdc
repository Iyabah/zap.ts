---
description: Core architectural and coding standards for Zap.ts projects.
globs:
  - "**/*"
alwaysApply: true
---

# Zap.ts Architecture & Conventions

These rules define the structural and development standards for any project based on the Zap.ts stack.

They exist to maintain consistency, reliability, and clarity across codebases.

## 1. Project Structure

Organize all logic under the `src/` directory, using the following layout:

* `actions/` — Server actions (e.g., `update-user.action.ts`)
* `app/` — Next.js app routes (pages, layouts, metadata)
* `components/` — Reusable UI components

  * `ui/` — Low-level primitives
  * `common/` — Feature-specific blocks
* `data/` — Static values, constants (UPPERCASE)
* `db/` — Drizzle ORM schemas and DB logic
* `hooks/` — Custom React hooks (`use-*`)
* `lib/` — Shared utilities (API clients, helpers)
* `providers/` — React context providers
* `rpc/` — oRPC type-safe procedures
* `stores/` — Zustand stores for app state
* `types/` — Global types and Zod schemas

## 2. Naming Conventions

Use file names that reflect function and context:

| Type            | Pattern       | Example                 |
| --------------- | ------------- | ----------------------- |
| Hook            | `use-*.ts`    | `use-user-profile.ts`   |
| Component       | `*.tsx`       | `user-card.tsx`         |
| Store           | `*.store.ts`  | `user.store.ts`         |
| Server Action   | `*.action.ts` | `update-user.action.ts` |
| DB Schema (SQL) | `*.sql.ts`    | `auth.sql.ts`           |
| Zod Schema      | `*.schema.ts` | `user.schema.ts`        |
| RPC Procedure   | `*.rpc.ts`    | `user.rpc.ts`           |
| Constants       | Uppercase     | `BASE_URL` in `data/`   |

## 3. Type Safety

* TypeScript is mandatory.
* All input/output validation must use Zod (`src/types/*.schema.ts`).
* Prefer Zustand over React Context.
* RPC must be type-safe with oRPC.

## 4. State Management

* Use Zustand (`src/stores/`) for local/global state.
* Middleware: Use `persist` where needed.
* Wrap access in custom hooks for clarity.

```ts
import { create } from "zustand";

type UserState = {
  name: string;
  setName: (name: string) => void;
};

export const useUserStore = create<UserState>((set) => ({
  name: "",
  setName: (name) => set({ name }),
}));
```

## 5. Type-Safe API

* Define oRPC functions in `src/rpc/procedures/`.
* Register them in \[@rpc/router.ts].
* Use SWR or custom hooks for fetching client-side.

```ts
import { useORPC } from "@/stores/orpc.store";
import useSWR from "swr";

export const useUserProfile = () => {
  const orpc = useORPC();
  return useSWR(orpc.userProfile.key(), orpc.userProfile.queryOptions().queryFn);
};
```

## 6. Authentication

* Use the Better Auth package.
* Place auth logic in \[@auth/].
* Use server actions for login/session handling.

## 7. Database

* Use Drizzle ORM with PostgreSQL.
* Define schemas in `src/db/schema/`.
* Re-export from \[@schema/index.ts].

```ts
import { z } from "zod";

export const userSchema = z.object({
  id: z.string().uuid(),
  name: z.string().min(1),
});
```

## 8. Error Handling

* Use [Effect](https://effect.website) for typed async flows and errors.
* Avoid try/catch; prefer declarative error modeling.

## 9. Environment Variables

* Store secrets/config in `.env`.
* Prefix anything MCP-specific with `MCP_`.

## 10. PWA / SEO / Analytics

* Configure all in \[@zap.config.ts].
* PWA manifest is generated from config.
* Use `next-sitemap` for automated SEO sitemap generation.

## 11. Dependencies

* Use correct versions and constraints from \[@package.json].
* Avoid implicit version upgrades unless explicitly updated.

##  References

* @package.json: Project configuration, versions, conventions
* @zap.config.ts: Global PWA, SEO, analytics config
* @rpc/router.ts: RPC procedure registration
* @schema/index.ts: Central DB schema exports
* @auth/: Auth logic for Better Auth integration