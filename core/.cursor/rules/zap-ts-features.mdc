---
description: 
globs: 
alwaysApply: false
---
# Zap.ts Feature Boilerplate

This notepad provides templates for scaffolding a new feature in a Zap.ts project, ensuring consistency with the project structure and conventions defined in `zap-ts-always.mdc` and `zap-ts-agent.mdc`.

## Feature Folder Structure
For a new feature (e.g., `chat`), create the following files and directories under `src/zap/` and `src/app/`:

- `src/zap/components/chat/`
- `src/zap/hooks/chat/`
- `src/zap/actions/chat.action.ts`
- `src/zap/schemas/chat.schema.ts`
- `src/zap/db/schema/chat.sql.ts`
- `src/zap/rpc/procedures/chat.rpc.ts`
- `src/zap/stores/chat.store.ts`
- `src/app/(pages|api)/(public|auth-only)/chat/`

## Template: Server Action (`chat.action.ts`)
```typescript
// src/zap/actions/chat.action.ts
"use server";

import { z } from "zod/v4";
import { ChatSchema } from "@/zap/schemas/chat.schema";
import { db } from "@/db";
import { chat } from "@/zap/db/schema/chat.sql";

export async function createChatAction(input: z.infer<typeof ChatSchema>) {
  const validatedInput = ChatSchema.parse(input);
  const result = await db.insert(chat).values(validatedInput).returning();
  return result[0];
}
```

## Template: Zod Schema (`chat.schema.ts`)
```typescript
// src/zap/schemas/chat.schema.ts
import { z } from "zod/v4";

export const ChatSchema = z.object({
  id: z.string().uuid().optional(),
  userId: z.string().uuid(),
  message: z.string().min(1).max(1000),
  createdAt: z.date().optional(),
});
```

## Template: Drizzle Schema (`chat.sql.ts`)
```typescript
// src/zap/db/schema/chat.sql.ts
import { pgTable, uuid, text, timestamp } from "drizzle-orm/pg-core";

export const chat = pgTable("chat", {
  id: uuid("id").primaryKey().defaultRandom(),
  userId: uuid("user_id").notNull(),
  message: text("message").notNull(),
  createdAt: timestamp("created_at").defaultNow(),
});
```

## Template: oRPC Procedure (`chat.rpc.ts`)
```typescript
// src/zap/rpc/procedures/chat.rpc.ts
import { z } from "zod/v4";
import { ChatSchema } from "@/zap/schemas/chat.schema";
import { os } from "@orpc/server";
import { authMiddleware } from "@/rpc/middlewares";

export const chat = os
  .prefix("/chat")
  .middleware(authMiddleware)
  .procedure({
    create: {
      input: ChatSchema,
      output: ChatSchema,
      handler: async ({ input, context }) => {
        const result = await createChatAction(input);
        return result;
      },
    },
  });
```

## Template: Zustand Store (`chat.store.ts`)
```typescript
// src/zap/stores/chat.store.ts
import { create } from "zustand";

interface ChatState {
  messages: Array<{ id: string; message: string }>;
  addMessage: (message: { id: string; message: string }) => void;
}

export const useChatStore = create<ChatState>((set) => ({
  messages: [],
  addMessage: (message) => set((state) => ({ messages: [...state.messages, message] })),
}));
```

## Template: React Component (`ChatWindow.tsx`)
```typescript
// src/zap/components/chat/ChatWindow.tsx
"use client";

import { useChatStore } from "@/zap/stores/chat.store";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

export function ChatWindow() {
  const { messages, addMessage } = useChatStore();

  return (
    <div className={cn("flex flex-col gap-4 p-4")}>
      {messages.map((msg) => (
        <div key={msg.id} className="bg-muted rounded-lg p-2">
          {msg.message}
        </div>
      ))}
      <div className="flex gap-2">
        <Input placeholder="Type a message..." />
        <Button>Send</Button>
      </div>
    </div>
  );
}
```

## Template: API Route (`route.ts`)
```typescript
// src/app/(api)/(auth-only)/chat/route.ts
import { chat } from "@/zap/rpc/procedures/chat.rpc";
import { router } from "@/rpc/router";

export const POST = router.chat.create;
```

## Template: Page (`page.tsx`)
```typescript
// src/app/(pages)/(auth-only)/chat/page.tsx
"use client";

import { ChatWindow } from "@/zap/components/chat/ChatWindow";

export default function ChatPage() {
  return (
    <div className="container mx-auto p-4">
      <ChatWindow />
    </div>
  );
}
```

## Next Steps
1. Update `src/zap/rpc/router.ts` to include the new `chat` procedure:
   ```typescript
   import { chat } from "@/zap/rpc/procedures/chat.rpc";
   export const router = { ..., chat };
   ```
2. Add a feature flag in `src/data/flags.ts`:
   ```typescript
   export const FLAGS = { ..., enableChat: false };
   ```
3. Run `bun run format` and `bun run lint` to ensure compliance.